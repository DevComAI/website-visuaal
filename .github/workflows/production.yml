name: Deploy to Production

on:
  push:
    branches:
      - main
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/visuaal-production

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level=moderate

  build-and-deploy:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          password: ${{ secrets.PRODUCTION_PASSWORD }}
          script: |
            # Create backup of current container
            docker commit visuaal-production visuaal-production-backup-$(date +%Y%m%d-%H%M%S) || true

            # Stop existing container
            docker stop visuaal-production || true
            docker rm visuaal-production || true

            # Login to Docker Hub
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

            # Pull latest image
            docker pull ${{ env.IMAGE_NAME }}:latest

            # Run new container with health check
            docker run -d \
              --name visuaal-production \
              --restart unless-stopped \
              -p 80:3000 \
              --health-cmd="curl -f http://localhost:3000/api/health || exit 1" \
              --health-interval=15s \
              --health-timeout=10s \
              --health-retries=5 \
              --health-start-period=60s \
              ${{ env.IMAGE_NAME }}:latest

            echo "üöÄ Production application deployed on port 80"

            # Wait for health check with status monitoring
            echo "Waiting for health check..."
            sleep 10
            for i in {1..12}; do
              HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' visuaal-production 2>/dev/null || echo "unknown")
              echo "Health check attempt $i/12: $HEALTH_STATUS"
              if [ "$HEALTH_STATUS" = "healthy" ]; then
                echo "‚úÖ Container is healthy"
                break
              fi
              sleep 10
            done

            # Final health check
            FINAL_HEALTH=$(docker inspect --format='{{.State.Health.Status}}' visuaal-production 2>/dev/null || echo "unknown")
            if [ "$FINAL_HEALTH" != "healthy" ]; then
              echo "‚ùå Deployment failed - container is $FINAL_HEALTH"
              echo "Container logs:"
              docker logs --tail 50 visuaal-production

              echo "Rolling back..."
              docker stop visuaal-production || true
              docker rm visuaal-production || true

              # Restore from backup if available
              BACKUP_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "visuaal-production-backup-" | head -n 1)
              if [ ! -z "$BACKUP_IMAGE" ]; then
                echo "Restoring from backup: $BACKUP_IMAGE"
                docker run -d \
                  --name visuaal-production \
                  --restart unless-stopped \
                  -p 80:3000 \
                  $BACKUP_IMAGE
              else
                echo "No backup available for rollback"
              fi
              exit 1
            fi

            # Clean up old images (keep last 3 backups)
            docker images visuaal-production-backup-* --format "table {{.Repository}}:{{.Tag}}" | tail -n +4 | xargs -r docker rmi
            docker image prune -f

            # Logout from Docker Hub
            docker logout